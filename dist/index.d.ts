import { Attributes, Events, Func, Init, Prop, States, Subscribers } from "../types";
declare class Criya {
    init: Init;
    prop: Prop;
    events: Events;
    attr: Attributes;
    domElement: HTMLElement | undefined;
    states: States;
    pseudoStates: States;
    subscribers: Subscribers<Criya>;
    private onmount;
    private onunmount;
    private onsubscribed;
    private onnewsubscriber;
    private effects;
    private renderCondition;
    constructor(init: Init, prop?: Prop, events?: Events, attr?: Attributes);
    render(): void;
    mount(): this;
    unMount(): void;
    private _directMount;
    isMount(): boolean;
    make(): this;
    static subscribe(subscriber: Criya, main: Criya, forStates: string[]): void;
    state<T>(stateName: string, initialValue: T): [(() => T), ((newVal: T | Func<T, T>) => void)];
    effect(func: CallableFunction, dependencyArray: string[], onFirst?: boolean): void;
    putIf(condition: ((() => boolean) | string), stick?: boolean): [() => boolean, (newVal: boolean | Func<boolean, boolean>) => void];
    onMount(func: ((didMount?: boolean) => void)): void;
    onUnmount(func: CallableFunction): void;
    onNewSubscriber(func: CallableFunction): void;
    onSubscribed(func: CallableFunction): void;
    private getState;
    private getPState;
    private formatString;
    private stateExtracter;
}
declare const subscribe: typeof Criya.subscribe;
export { subscribe };
export default Criya;
